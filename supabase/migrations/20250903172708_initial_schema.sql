CREATE SCHEMA IF NOT EXISTS "gis";
CREATE EXTENSION postgis WITH SCHEMA "gis";

CREATE SCHEMA IF NOT EXISTS "http";
CREATE EXTENSION http WITH SCHEMA "http";

CREATE TYPE public.dimensions AS (
  height integer,
  width integer
);

CREATE TYPE public.sex AS ENUM (
  'male',
  'female'
);

CREATE TYPE public.lat_lng AS (
  lat double precision,
  lng double precision
);

CREATE TABLE public.users (
  id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  sub varchar(100) NOT NULL UNIQUE,
  name text,
  nickname text,
  email text NOT NULL,
  updated_at timestamp NOT NULL
);
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE users IS 'to be replaced by auth.users';

CREATE SCHEMA happywhale;

CREATE TABLE happywhale.species (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  code varchar(50) NOT NULL UNIQUE,
  name varchar(100) NOT NULL,
  plural varchar(100) NOT NULL,
  scientific varchar(100)
);
COMMENT ON COLUMN happywhale.species.scientific IS 'Null for non-species species, e.g. for marine_debris';

CREATE TABLE happywhale.users (
  id INTEGER PRIMARY KEY,
  display_name varchar(100)
);

CREATE TABLE happywhale.individuals (
  id integer PRIMARY KEY,
  species integer not null references happywhale.species (id) DEFERRABLE INITIALLY DEFERRED,
  primary_id varchar(50) not null,
  nickname varchar(50),
  sex public.sex
);

CREATE TYPE happywhale.accuracy AS ENUM ('GENERAL', 'APPROX', 'PRECISE');
CREATE TABLE happywhale.encounters (
  id INTEGER PRIMARY KEY,
  start_date DATE NOT NULL,
  start_time TIME,
  end_date DATE CHECK (end_date IS NULL OR end_date <= start_date),
  end_time TIME,
  timezone VARCHAR(20),
  verbatim_location VARCHAR(100),
  location gis.geography(Point) NOT NULL,
  accuracy happywhale.accuracy,
  precision_source varchar(100),
  individual_id integer REFERENCES happywhale.individuals (id) NOT NULL,
  species_id integer REFERENCES happywhale.species (id),
  min_count int,
  max_count int CHECK (max_count IS NULL OR min_count IS NOT NULL),
  comments varchar(2000),
  public boolean NOT NULL,
  fetched_at timestamp not null,
  user_id INTEGER REFERENCES happywhale.users (id)
);
CREATE TABLE happywhale.media (
  id integer PRIMARY KEY,
  encounter_id INTEGER NOT NULL REFERENCES happywhale.encounters (id),
  thumb_url varchar(2000) NOT NULL,
  url varchar(2000) NOT NULL,
  timestamp timestamp,
  timezone varchar(50),
  user_id INTEGER REFERENCES happywhale.users (id),
  license_level varchar(50),
  mimetype varchar(100),
  public boolean NOT NULL
);
CREATE TABLE happywhale.encounter_media (
  encounter_id INTEGER NOT NULL REFERENCES happywhale.encounters (id),
  media_id INTEGER NOT NULL REFERENCES happywhale.media (id),
  UNIQUE (encounter_id, media_id)
);


CREATE SCHEMA inaturalist;

CREATE TYPE inaturalist.rank AS ENUM (
  'infrahybrid',
  'form',
  'variety',
  'subspecies',
  'hybrid',
  'species',
  'complex',
  'subsection',
  'section',
  'subgenus',
  'genushybrid',
  'genus',
  'subtribe',
  'tribe',
  'supertribe',
  'subfamily',
  'family',
  'epifamily',
  'superfamily',
  'zoosubsection',
  'zoosection',
  'parvorder',
  'infraorder',
  'suborder',
  'order',
  'superorder',
  'subterclass',
  'infraclass',
  'subclass',
  'class',
  'superclass',
  'subphylum',
  'phylum',
  'kingdom',
  'stateofmatter'
);
CREATE TYPE inaturalist.license AS ENUM (
  'cc0',
  'cc-by',
  'cc-by-nc',
  'cc-by-sa',
  'cc-by-nd',
  'cc-by-nc-sa',
  'cc-by-nc-nd'
);
CREATE TABLE inaturalist.taxa (
  id integer PRIMARY KEY,
  parent_id integer REFERENCES inaturalist.taxa (id) DEFERRABLE INITIALLY DEFERRED,
  scientific_name character varying(100) NOT NULL UNIQUE,
  vernacular_name varchar(100),
  rank inaturalist.rank NOT NULL
);
CREATE TABLE inaturalist.observations (
  id bigint PRIMARY KEY,
  description text,
  location gis.geography(Point) NOT NULL,
  observed_at TIMESTAMPTZ NOT NULL,
  license_code inaturalist.license,
  uri varchar(200) NOT NULL,
  username varchar,
  taxon_id integer NOT NULL REFERENCES inaturalist.taxa (id),
  fetched_at timestamp NOT NULL
);
CREATE INDEX inaturalist_observations_observed_at ON inaturalist.observations USING btree (observed_at);

CREATE TABLE inaturalist.observation_photos (
  id bigint PRIMARY KEY,
  observation_id bigint NOT NULL REFERENCES inaturalist.observations (id),
  seq SMALLINT NOT NULL,
  attribution varchar(200) NOT NULL,
  hidden boolean NOT NULL,
  license inaturalist.license NOT NULL,
  original_dimensions public.dimensions NOT NULL,
  url VARCHAR(200) NOT NULL
);
CREATE INDEX inaturalist_observation_photos ON inaturalist.observation_photos (observation_id);


CREATE SCHEMA maplify;

CREATE TABLE maplify.sightings (
  id integer NOT NULL PRIMARY KEY,
  project_id integer NOT NULL,
  trip_id integer NOT NULL,
  scientific_name character varying(50) NOT NULL,
  location gis.geography(Point) NOT NULL,
  number_sighted integer NOT NULL,
  created_at timestamp NOT NULL,
  photo_url character varying(1000),
  comments character varying(2000),
  in_ocean boolean NOT NULL,
  moderated smallint NOT NULL,
  trusted boolean NOT NULL,
  is_test boolean NOT NULL,
  source character varying(50) NOT NULL,
  usernm character varying(100)
);
CREATE INDEX sightings_created_at ON maplify.sightings USING btree (created_at);


CREATE TABLE public.sightings (
  id uuid NOT NULL PRIMARY KEY,
  user_id INTEGER REFERENCES users (id),
  observed_at timestamptz NOT NULL,
  subject_location gis.geography(Point,4326) NOT NULL,
  observer_location gis.geography(Point,4326),
  body character varying(2000),
  count smallint CHECK (count IS NULL OR count > 0),
  url character varying(2000),
  created_at timestamp without time zone NOT NULL,
  updated_at timestamp without time zone NOT NULL,
  direction character varying(10),
  taxon_id INTEGER NOT NULL REFERENCES inaturalist.taxa (id)
);
CREATE INDEX sightings_observed_at ON public.sightings USING btree (observed_at);
ALTER TABLE public.sightings ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.sighting_photos (
  id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  sighting_id uuid NOT NULL REFERENCES public.sightings(id) ON DELETE CASCADE,
  seq smallint NOT NULL CHECK (seq >= 0),
  href character varying(2000) NOT NULL,
  license_code character varying(20) NOT NULL,
  CONSTRAINT sighting_seq UNIQUE (sighting_id, seq)
);
CREATE INDEX sighting_photos_sighting_id ON public.sighting_photos (sighting_id);
ALTER TABLE public.sighting_photos ENABLE ROW LEVEL SECURITY;


CREATE VIEW presence AS
SELECT
  s.*,
  coalesce(vernacular_name, scientific_name) AS name,
  scientific_name,
  vernacular_name
FROM (
  SELECT
    'maplify:' || s.id AS id,
    comments AS body,
    CASE WHEN number_sighted BETWEEN 1 AND 1000 THEN number_sighted ELSE null END AS count,
    null AS direction,
    gis.ST_AsGeoJSON(location) AS location,
    s.created_at AT TIME ZONE 'PST8PDT' AS timestamp,
    CASE WHEN photo_url IS NULL THEN jsonb_build_array() ELSE jsonb_build_array(jsonb_build_object('url', photo_url)) END AS photos_json,
    source,
    null AS url,
    null AS path,
    null AS userName,
    null AS userSub,
    t.id AS taxon_id
  FROM maplify.sightings s
  JOIN inaturalist.taxa t ON s.scientific_name = t.scientific_name
  WHERE NOT is_test

  UNION ALL

  SELECT
    'inaturalist:' || id AS id,
    description AS body,
    null AS count,
    null AS direction,
    gis.ST_AsGeoJSON(location) AS location,
    observed_at AS "timestamp",
    (SELECT
      jsonb_agg(jsonb_build_object('url', url, 'attribution', attribution) ORDER BY seq ASC)
      FROM inaturalist.observation_photos
      WHERE observation_id = id AND NOT hidden
    ) AS photos_json,
    'iNaturalist' AS source,
    uri AS url,
    null AS path,
    username AS userName,
    null AS userSub,
    taxon_id
  FROM inaturalist.observations

  UNION ALL

  SELECT
    'happywhale:' || e.id AS id,
    comments AS body,
    null AS count,
    null AS direction,
    gis.ST_AsGeoJSON(location) AS location,
    (start_date + coalesce(start_time, '12:00:00'::time)) AT TIME ZONE timezone AS "timestamp",
    (SELECT
      jsonb_agg(jsonb_build_object('url', url, 'attribution', u.display_name) ORDER BY m.id ASC)
      FROM happywhale.media m
      JOIN happywhale.users u ON m.user_id = u.id
      WHERE public AND encounter_id = e.id
    ) AS photos_json,
    'happywhale' AS source,
    'https://happywhale.com/individual/' || i.id || ';enc=' || e.id AS url,
    null AS path,
    u.display_name AS userName,
    null AS userSub,
    t.id
  FROM happywhale.encounters AS e
  JOIN happywhale.individuals AS i ON e.individual_id = i.id
  JOIN happywhale.users AS u ON e.user_id = u.id
  JOIN happywhale.species AS s ON e.species_id = s.id
  LEFT JOIN inaturalist.taxa AS t ON s.scientific = t.scientific_name

  UNION ALL

  SELECT
    'salishsea:' || s.id AS id,
    body,
    count,
    direction,
    gis.ST_AsGeoJSON(subject_location) AS location,
    observed_at AS "timestamp",
    (SELECT jsonb_agg(jsonb_build_object('url', href) ORDER BY seq ASC) FROM sighting_photos WHERE sighting_id = s.id) AS photos_json,
    'salishsea',
    url,
    '/api/sightings/' || s.id AS path,
    coalesce(u.name, u.nickname, 'someone') AS userName,
    u.sub AS userSub,
    taxon_id
  FROM sightings AS s
  LEFT JOIN users AS u ON s.user_id = u.id
) AS s
JOIN inaturalist.taxa AS t ON s.taxon_id = t.id
